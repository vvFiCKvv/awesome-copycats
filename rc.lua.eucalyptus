--[[
                               
     Copland Awesome WM config 
     github.com/copycat-killer 
                               
--]]

-- {{{ Required libraries
local gears     = require("gears")
local awful     = require("awful")
awful.rules     = require("awful.rules")
                  require("awful.autofocus")
local wibox     = require("wibox")
local beautiful = require("beautiful")
local naughty   = require("naughty")
local drop      = require("scratchdrop")
local lain      = require("lain")
local eminent   = require("eminent")

local radical = require("radical")
local pretty = require("pretty")
-- }}}

-- {{{ Error handling
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = err, --"Oops, an error happened!",
                         text =  debug.traceback() })
		print("=============================ERROR==================================")
		print(err)
		print(debug.traceback())
		print("--------------------------------------------------------------------")
        in_error = false
    end)
end
-- }}}





-- {{{ Autostart applications
function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
     findme = cmd:sub(0, firstspace-1)
  end
  awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
end

run_once("urxvtd")
run_once("unclutter -root")
-- }}}

-- {{{ Variable definitions
-- localization
os.setlocale(os.getenv("LANG"))

-- beautiful init
beautiful.init(os.getenv("HOME") .. "/.config/awesome/themes/eucalyptus/theme.lua")
-- {{{ Local variables


shortcuts = require ("shortcuts")
local clientkeys  = shortcuts.clientkeys
local clientbuttons = shortcuts.clientbuttons
terminal = shortcuts.terminal
local modkey = shortcuts.modkey
-- }}}

-- lain
lain.layout.termfair.nmaster   = 3
lain.layout.termfair.ncol      = 1
lain.layout.centerfair.nmaster = 3
lain.layout.centerfair.ncol    = 1

local layouts = {
	awful.layout.suit.tile.top, -- suit is the only one mouse resize works
	awful.layout.suit.tile,
	awful.layout.suit.tile.left,
--	awful.layout.suit.tile.bottom,
--TODO: fix mouse resize see https://github.com/Ram-Z/lain/commit/19c89b4f00231aa29019708134fce39a40d4b06e
--	lain.layout.uselessfair.horizontal,
--	awful.layout.suit.fair,
--	lain.layout.uselesstile,
--	lain.layout.uselessfair,
--	lain.layout.termfair,
--	lain.layout.centerfair,
--	lain.layout.uselesspiral.dwindle,
--	pretty.layout.test
}
-- }}}

-- {{{ Tags
tags = {
    names = { "1", "2", "3", "4", "5", "6", "7", "8", "9" },
    layout = { layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1] }
}
for s = 1, screen.count() do
   tags[s] = awful.tag(tags.names, s, tags.layout)
end
pretty.history.init()
-- {{{ Wallpaper
if beautiful.wallpaper then
    for s = 1, screen.count() do
        gears.wallpaper.maximized(beautiful.wallpaper, s, false)
    end
end
-- }}}

pretty.widgets.panel(layouts)

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function ()
		local menu = require("pretty.menus.application").build_menu()
		require("pretty.menus").popup(menu) 
	end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}
-- Set keys

root.keys(shortcuts.globalkeys)
	
-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     keys = clientkeys,
                     buttons = clientbuttons,
	                   size_hints_honor = false } },
    { rule = { class = "URxvt" },
          properties = { opacity = 0.1 } },
    { rule = { class = "Conky" },
      properties = { border_width = 0,
                     border_color = beautiful.border_normal,} },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
local sloppyfocus_last = {c=nil}
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    client.connect_signal("mouse::enter", function(c)
         if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
             -- Skip focusing the client if the mouse wasn't moved.
             if c ~= sloppyfocus_last.c then
                 client.focus = c
                 sloppyfocus_last.c = c
             end
         end
     end)
	--TODO:    titlebar
	menu = pretty.menus.client(c)
	pretty.widgets.titlebar(c, menu)
	
end)
