--[[
                               
     Copland Awesome WM config 
     github.com/copycat-killer 
                               
--]]

-- {{{ Required libraries
local gears     = require("gears")
local awful     = require("awful")
awful.rules     = require("awful.rules")
                  require("awful.autofocus")
local wibox     = require("wibox")
local beautiful = require("beautiful")
local naughty   = require("naughty")
local drop      = require("scratchdrop")
local lain      = require("lain")
local eminent   = require("eminent")

local radical = require("radical")
local eucalyptus = require("eucalyptus")
shortcuts = require ("eucalyptus.shortcuts")
-- }}}

-- {{{ Error handling
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = err, --"Oops, an error happened!",
                         text =  debug.traceback() })
        in_error = false
    end)
end
-- }}}

-- {{{ Local variables
--shortcuts = eucalyptus.shortcuts
local clientkeys  = shortcuts.clientkeys
local clientbuttons = shortcuts.clientbuttons
terminal = shortcuts.terminal
local modkey = shortcuts.modkey
--TODO: one timer per tag
local switchTimer = { 
	index = 1,
	timer = nil,
	type = nil,
	types = { client = 0, tag = 1, tagScreens = 2 },
	screen = nil,
	tag = nil,
	clear = function (this)
				if this.timer then
					this.timer:stop() -- stop and clear the timer
				end
				this.timer = nil
				this.index = 1
				this.type = nil
				this.screen = nil
				this.tag = nil
			end,
	init = function (this, seconds, type)
		this.timer = timer { timeout = seconds } -- init timer with interval 1 sec
		this.type = type
		this.screen = mouse.screen
		this.tag = awful.tag.selected()
		this.timer:connect_signal("timeout",-- on timeout
			function()
				this:clear()
			end)
	end
}
-- }}}



-- {{{ Autostart applications
function run_once(cmd)
  findme = cmd
  firstspace = cmd:find(" ")
  if firstspace then
     findme = cmd:sub(0, firstspace-1)
  end
  awful.util.spawn_with_shell("pgrep -u $USER -x " .. findme .. " > /dev/null || (" .. cmd .. ")")
end

run_once("urxvtd")
run_once("unclutter -root")
-- }}}

-- {{{ Variable definitions
-- localization
os.setlocale(os.getenv("LANG"))

-- beautiful init
beautiful.init(os.getenv("HOME") .. "/.config/awesome/themes/eucalyptus/theme.lua")


-- lain
lain.layout.termfair.nmaster   = 3
lain.layout.termfair.ncol      = 1
lain.layout.centerfair.nmaster = 3
lain.layout.centerfair.ncol    = 1

local layouts = {
	awful.layout.suit.tile.top, -- suit is the only one mouse resize works
	awful.layout.suit.tile,
	awful.layout.suit.tile.left,
	awful.layout.suit.tile.bottom,
--TODO: fix mouse resize see https://github.com/Ram-Z/lain/commit/19c89b4f00231aa29019708134fce39a40d4b06e
	lain.layout.uselessfair.horizontal,
	awful.layout.suit.fair,
	lain.layout.uselesstile,
	lain.layout.uselessfair,
	lain.layout.termfair,
	lain.layout.centerfair,
	lain.layout.uselesspiral.dwindle,
}
-- }}}

-- {{{ Tags
tags = {
    names = { "1", "2", "3", "4", "5", "6", "7", "8", "9" },
    layout = { layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1], layouts[1] }
}
for s = 1, screen.count() do
   tags[s] = awful.tag(tags.names, s, tags.layout)
end

-- {{{ Wallpaper
if beautiful.wallpaper then
    for s = 1, screen.count() do
        gears.wallpaper.maximized(beautiful.wallpaper, s, false)
    end
end
-- }}}
-- {{{ Menu
mymainmenu = awful.menu.new({ items = require("menugen").build_menu(),
                              theme = { height = 20, width = 200 }})

-- {{{ Wibox
markup = lain.util.markup
blue   = beautiful.fg_focus
red    = "#EB8F8F"
green  = "#8FEB8F"

-- Textclock
mytextclock = awful.widget.textclock("<span font='Tamsyn 5'> </span>%H:%M ")

-- Calendar
lain.widgets.calendar:attach(mytextclock, {position = "bottom_right"})

--[[ Mail IMAP check
-- commented because it needs to be set before use
mailwidget = lain.widgets.imap({
    timeout  = 180,
    server   = "server",
    mail     = "mail",
    password = "keyring get mail",
    settings = function()
        mail  = ""
        count = ""

        if mailcount > 0 then
            mail = "<span font='Tamsyn 5'> </span>Mail "
            count = mailcount .. " "
        end

        widget:set_markup(markup(blue, mail) .. count)
    end
})
--]]

-- MPD
mpdicon = wibox.widget.imagebox(beautiful.play)
mpdwidget = lain.widgets.mpd({
    settings = function()
        if mpd_now.state == "play" then
            title = mpd_now.title
            artist  = " - " .. mpd_now.artist  .. markup("#333333", " |<span font='Tamsyn 3'> </span>")
            mpdicon:set_image(beautiful.play)
        elseif mpd_now.state == "pause" then
            title = "mpd "
            artist  = "paused" .. markup("#333333", " |<span font='Tamsyn 3'> </span>")
            mpdicon:set_image(beautiful.pause)
        else
            title  = ""
            artist = ""
            mpdicon:set_image()
        end

        widget:set_markup(markup(blue, title) .. artist)
    end
})

-- Battery
baticon = wibox.widget.imagebox(beautiful.bat)
batbar = awful.widget.progressbar()
batbar:set_color(beautiful.fg_normal)
batbar:set_width(55)
batbar:set_ticks(true)
batbar:set_ticks_size(6)
batbar:set_background_color(beautiful.bg_normal)
batmargin = wibox.layout.margin(batbar, 2, 7)
batmargin:set_top(6)
batmargin:set_bottom(6)
batupd = lain.widgets.bat({
    settings = function()
       if bat_now.perc == "N/A" or bat_now.status == "Not present" then
            bat_perc = 100
            baticon:set_image(beautiful.ac)
        elseif bat_now.status == "Charging" then
            bat_perc = tonumber(bat_now.perc)
            baticon:set_image(beautiful.ac)

            if bat_perc >= 98 then
                batbar:set_color(green)
            elseif bat_perc > 50 then
                batbar:set_color(beautiful.fg_normal)
            elseif bat_perc > 15 then
                batbar:set_color(beautiful.fg_normal)
            else
                batbar:set_color(red)
            end
        else
            bat_perc = tonumber(bat_now.perc)

            if bat_perc >= 98 then
                batbar:set_color(green)
            elseif bat_perc > 50 then
                batbar:set_color(beautiful.fg_normal)
                baticon:set_image(beautiful.bat)
            elseif bat_perc > 15 then
                batbar:set_color(beautiful.fg_normal)
                baticon:set_image(beautiful.bat_low)
            else
                batbar:set_color(red)
                baticon:set_image(beautiful.bat_no)
            end
        end
        batbar:set_value(bat_perc / 100)
    end
})
batwidget = wibox.widget.background(batmargin)
batwidget:set_bgimage(beautiful.widget_bg)

-- /home fs
diskicon = wibox.widget.imagebox(beautiful.disk)
diskbar = awful.widget.progressbar()
diskbar:set_color(beautiful.fg_normal)
diskbar:set_width(55)
diskbar:set_ticks(true)
diskbar:set_ticks_size(6)
diskbar:set_background_color(beautiful.bg_normal)
diskmargin = wibox.layout.margin(diskbar, 2, 7)
diskmargin:set_top(6)
diskmargin:set_bottom(6)
fshomeupd = lain.widgets.fs({
    partition = "/home",
    settings  = function()
        if fs_now.used < 90 then
            diskbar:set_color(beautiful.fg_normal)
        else
            diskbar:set_color("#EB8F8F")
        end
        diskbar:set_value(fs_now.used / 100)
    end
})
diskwidget = wibox.widget.background(diskmargin)
diskwidget:set_bgimage(beautiful.widget_bg)

-- ALSA volume bar
volicon = wibox.widget.imagebox(beautiful.vol)
volume = lain.widgets.alsabar({width = 55, ticks = true, ticks_size = 6,
card = "0", step = "2%",
settings = function()
    if volume_now.status == "off" then
        volicon:set_image(beautiful.vol_mute)
    elseif volume_now.level == 0 then
        volicon:set_image(beautiful.vol_no)
    elseif volume_now.level <= 50 then
        volicon:set_image(beautiful.vol_low)
    else
        volicon:set_image(beautiful.vol)
    end
end,
colors =
{
    background = beautiful.bg_normal,
    mute = red,
    unmute = beautiful.fg_normal
}})
volmargin = wibox.layout.margin(volume.bar, 2, 7)
volmargin:set_top(6)
volmargin:set_bottom(6)
volumewidget = wibox.widget.background(volmargin)
volumewidget:set_bgimage(beautiful.widget_bg)

-- Weather
yawn = lain.widgets.yawn(123456)

-- Separators
spr = wibox.widget.textbox(' ')
small_spr = wibox.widget.textbox('<span font="Tamsyn 4"> </span>')
bar_spr = wibox.widget.textbox('<span font="Tamsyn 3"> </span>' .. markup("#333333", "|") .. '<span font="Tamsyn 3"> </span>')

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
                    awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  -- Without this, the following
                                                  -- :isvisible() makes no sense
                                                  c.minimized = false
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)
--	local rad_taglist     = require( "radical.impl.taglist"      )
--	rad_taglist.taglist_watch_name_changes = true
--	mytaglist[s] = rad_taglist(s)._internal.margin
    -- Create a tasklist widget
--    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)
	local rad_task     = require( "radical.impl.tasklist"      )
	mytasklist[s] = rad_task(s)._internal.margin
    -- Create the wibox
    mywibox[s] = awful.wibox({ position = "bottom", screen = s, height = 18 })

    -- Widgets that are aligned to the left
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(small_spr)
    left_layout:add(mylayoutbox[s])
    left_layout:add(bar_spr)
    left_layout:add(mytaglist[s])
    left_layout:add(spr)
    left_layout:add(mypromptbox[s])
	left_layout:add(bar_spr)
    
    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()
    if s == 1 then right_layout:add(wibox.widget.systray()) end
    right_layout:add(small_spr)
    right_layout:add(mpdicon)
    right_layout:add(mpdwidget)
    --right_layout:add(mailwidget)
    right_layout:add(baticon)
    right_layout:add(batwidget)
    right_layout:add(bar_spr)
    right_layout:add(diskicon)
    right_layout:add(diskwidget)
    right_layout:add(bar_spr)
    right_layout:add(volicon)
    right_layout:add(volumewidget)
    right_layout:add(bar_spr)
    right_layout:add(mytextclock)
    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)

    mywibox[s]:set_widget(layout)
end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}
-- Set keys
root.keys(shortcuts.globalkeys)
	
-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = awful.client.focus.filter,
                     keys = clientkeys,
                     buttons = clientbuttons,
	                   size_hints_honor = false } },
    { rule = { class = "URxvt" },
          properties = { opacity = 0.1 } },
    { rule = { class = "Conky" },
      properties = { border_width = 0,
                     border_color = beautiful.border_normal,} },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
local sloppyfocus_last = {c=nil}
client.connect_signal("manage", function (c, startup)
    -- Enable sloppy focus
    client.connect_signal("mouse::enter", function(c)
         if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
            and awful.client.focus.filter(c) then
             -- Skip focusing the client if the mouse wasn't moved.
             if c ~= sloppyfocus_last.c then
                 client.focus = c
                 sloppyfocus_last.c = c
             end
         end
     end)
	--TODO:    titlebar
	menu = eucalyptus.menus.client(c)
	eucalyptus.widgets.titlebar(c, menu)
	
end)

-- No border for maximized clients
client.connect_signal("focus",
	function(c)
		if c.maximized_horizontal == true and c.maximized_vertical == true then
			c.border_color = beautiful.border_normal
		else
			c.border_color = beautiful.border_focus
		end
	end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

-- {{{ Arrange signal handler
for s = 1, screen.count() do screen[s]:connect_signal("arrange", function ()
        local clients = awful.client.visible(s)
        local layout  = awful.layout.getname(awful.layout.get(s))

        if #clients > 0 then -- Fine grained borders and floaters control
            for _, c in pairs(clients) do -- Floaters always have borders
                if awful.client.floating.get(c) or layout == "floating" then
                    c.border_width = beautiful.border_width

                -- No borders with only one visible client
                elseif #clients == 1 or layout == "max" then
                    c.border_width = 0
                else
                    c.border_width = beautiful.border_width
                end
            end
        end
      end)
end

--keep the history of layouts per tag
awful.tag.attached_connect_signal(nil, "property::layout", function(t)
	s = awful.tag.getscreen(t)
	currentLayout = awful.layout.get()
	if currentLayout == awful.layout.suit.max or currentLayout == awful.layout.suit.floating then
		awful.tag.setproperty(t,"tilingLayout", false)
	else
		selectedTags = awful.tag.selectedlist(s)
		if #selectedTags == 1 then -- sigle tag selected
			awful.tag.setproperty(t,"last_layout", currentLayout)
			awful.tag.setproperty(t,"tilingLayout", true)
		end
	end
	if client.focus then
		client.focus:raise()
	end
end)
---[[
--TODO: multiple tags selection have its one history like a meta-tag fixes needing
for s = 1, screen.count() do
	screen[s]:connect_signal("tag::history::update", function()
		t = awful.tag.selected(s)
		selectedTags = awful.tag.selectedlist(s)
		if #selectedTags > 1 then -- multiple tags selected
			if awful.layout.get() ~= awful.layout.suit.floating and  awful.layout.get() ~= awful.layout.suit.max then
				awful.layout.multiTags = {}
				awful.layout.multiTags.last_layout =  awful.layout.get()
			end
		else -- single tag selected
			if awful.layout.multiTags ~= nil then -- deselecting multiple tags
				if awful.tag.getproperty(t,"last_layout") ~= nil then
					awful.layout.set(awful.tag.getproperty(t,"last_layout"))
					awful.layout.multiTags = nil
				end
			end
			if awful.tag.getproperty(t,"last_layout") == nil then
				awful.tag.setproperty(t,"last_layout", awful.layout.get())
			   --do some stuff when virtual desktop has changed
			end
		   --TODO:Correct the focus
			c = awful.mouse.client_under_pointer()
			if c ~= nil then
				if c:isvisible() == false then
				else
					client.focus = c
					client.focus:raise()
				end
			end
				--awful.client.focus.byidx(-1)
		end
	end)
	--initialize visible tag for each screen
	t = awful.tag.selected(s)
	awful.tag.setproperty(t,"last_layout", awful.layout.get())
end
--]]
--local tag = require("awful.tag")
local function tag_history_count(screen, idx)
	local s = screen or capi.mouse.screen
	return #data.history[s]
end
--awful.tag.history.restore = tag_history_count
